/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatisticsRouteImport } from './routes/statistics.route'
import { Route as SettingsRouteImport } from './routes/settings.route'
import { Route as OllamaRouteImport } from './routes/ollama.route'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as TasksIndexRouteImport } from './routes/tasks/index.route'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index.route'
import { Route as TasksCompletedRouteImport } from './routes/tasks/completed.route'
import { Route as TasksTaskIdRouteImport } from './routes/tasks/$taskId.route'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId.route'

// Create/Update Routes

const StatisticsRouteRoute = StatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const OllamaRouteRoute = OllamaRouteImport.update({
  id: '/ollama',
  path: '/ollama',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRouteRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRouteRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const TasksCompletedRouteRoute = TasksCompletedRouteImport.update({
  id: '/tasks/completed',
  path: '/tasks/completed',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRouteRoute = TasksTaskIdRouteImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRouteRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/ollama': {
      id: '/ollama'
      path: '/ollama'
      fullPath: '/ollama'
      preLoaderRoute: typeof OllamaRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/statistics': {
      id: '/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsRouteImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/tasks/completed': {
      id: '/tasks/completed'
      path: '/tasks/completed'
      fullPath: '/tasks/completed'
      preLoaderRoute: typeof TasksCompletedRouteImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/ollama': typeof OllamaRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/statistics': typeof StatisticsRouteRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRoute
  '/tasks/$taskId': typeof TasksTaskIdRouteRoute
  '/tasks/completed': typeof TasksCompletedRouteRoute
  '/projects': typeof ProjectsIndexRouteRoute
  '/tasks': typeof TasksIndexRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/ollama': typeof OllamaRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/statistics': typeof StatisticsRouteRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRoute
  '/tasks/$taskId': typeof TasksTaskIdRouteRoute
  '/tasks/completed': typeof TasksCompletedRouteRoute
  '/projects': typeof ProjectsIndexRouteRoute
  '/tasks': typeof TasksIndexRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/ollama': typeof OllamaRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/statistics': typeof StatisticsRouteRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRoute
  '/tasks/$taskId': typeof TasksTaskIdRouteRoute
  '/tasks/completed': typeof TasksCompletedRouteRoute
  '/projects/': typeof ProjectsIndexRouteRoute
  '/tasks/': typeof TasksIndexRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ollama'
    | '/settings'
    | '/statistics'
    | '/projects/$projectId'
    | '/tasks/$taskId'
    | '/tasks/completed'
    | '/projects'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ollama'
    | '/settings'
    | '/statistics'
    | '/projects/$projectId'
    | '/tasks/$taskId'
    | '/tasks/completed'
    | '/projects'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/ollama'
    | '/settings'
    | '/statistics'
    | '/projects/$projectId'
    | '/tasks/$taskId'
    | '/tasks/completed'
    | '/projects/'
    | '/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  OllamaRouteRoute: typeof OllamaRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
  StatisticsRouteRoute: typeof StatisticsRouteRoute
  ProjectsProjectIdRouteRoute: typeof ProjectsProjectIdRouteRoute
  TasksTaskIdRouteRoute: typeof TasksTaskIdRouteRoute
  TasksCompletedRouteRoute: typeof TasksCompletedRouteRoute
  ProjectsIndexRouteRoute: typeof ProjectsIndexRouteRoute
  TasksIndexRouteRoute: typeof TasksIndexRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  OllamaRouteRoute: OllamaRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  StatisticsRouteRoute: StatisticsRouteRoute,
  ProjectsProjectIdRouteRoute: ProjectsProjectIdRouteRoute,
  TasksTaskIdRouteRoute: TasksTaskIdRouteRoute,
  TasksCompletedRouteRoute: TasksCompletedRouteRoute,
  ProjectsIndexRouteRoute: ProjectsIndexRouteRoute,
  TasksIndexRouteRoute: TasksIndexRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ollama",
        "/settings",
        "/statistics",
        "/projects/$projectId",
        "/tasks/$taskId",
        "/tasks/completed",
        "/projects/",
        "/tasks/"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/ollama": {
      "filePath": "ollama.route.tsx"
    },
    "/settings": {
      "filePath": "settings.route.tsx"
    },
    "/statistics": {
      "filePath": "statistics.route.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId.route.tsx"
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId.route.tsx"
    },
    "/tasks/completed": {
      "filePath": "tasks/completed.route.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.route.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.route.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
